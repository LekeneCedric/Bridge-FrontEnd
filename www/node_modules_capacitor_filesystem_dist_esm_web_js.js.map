{"version":3,"file":"node_modules_capacitor_filesystem_dist_esm_web_js.js","mappings":"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","sources":["./node_modules/@capacitor/filesystem/dist/esm/web.js"],"sourcesContent":["import { WebPlugin } from '@capacitor/core';\nfunction resolve(path) {\n    const posix = path.split('/').filter(item => item !== '.');\n    const newPosix = [];\n    posix.forEach(item => {\n        if (item === '..' &&\n            newPosix.length > 0 &&\n            newPosix[newPosix.length - 1] !== '..') {\n            newPosix.pop();\n        }\n        else {\n            newPosix.push(item);\n        }\n    });\n    return newPosix.join('/');\n}\nfunction isPathParent(parent, children) {\n    parent = resolve(parent);\n    children = resolve(children);\n    const pathsA = parent.split('/');\n    const pathsB = children.split('/');\n    return (parent !== children &&\n        pathsA.every((value, index) => value === pathsB[index]));\n}\nexport class FilesystemWeb extends WebPlugin {\n    constructor() {\n        super(...arguments);\n        this.DB_VERSION = 1;\n        this.DB_NAME = 'Disc';\n        this._writeCmds = ['add', 'put', 'delete'];\n    }\n    async initDb() {\n        if (this._db !== undefined) {\n            return this._db;\n        }\n        if (!('indexedDB' in window)) {\n            throw this.unavailable(\"This browser doesn't support IndexedDB\");\n        }\n        return new Promise((resolve, reject) => {\n            const request = indexedDB.open(this.DB_NAME, this.DB_VERSION);\n            request.onupgradeneeded = FilesystemWeb.doUpgrade;\n            request.onsuccess = () => {\n                this._db = request.result;\n                resolve(request.result);\n            };\n            request.onerror = () => reject(request.error);\n            request.onblocked = () => {\n                console.warn('db blocked');\n            };\n        });\n    }\n    static doUpgrade(event) {\n        const eventTarget = event.target;\n        const db = eventTarget.result;\n        switch (event.oldVersion) {\n            case 0:\n            case 1:\n            default: {\n                if (db.objectStoreNames.contains('FileStorage')) {\n                    db.deleteObjectStore('FileStorage');\n                }\n                const store = db.createObjectStore('FileStorage', { keyPath: 'path' });\n                store.createIndex('by_folder', 'folder');\n            }\n        }\n    }\n    async dbRequest(cmd, args) {\n        const readFlag = this._writeCmds.indexOf(cmd) !== -1 ? 'readwrite' : 'readonly';\n        return this.initDb().then((conn) => {\n            return new Promise((resolve, reject) => {\n                const tx = conn.transaction(['FileStorage'], readFlag);\n                const store = tx.objectStore('FileStorage');\n                const req = store[cmd](...args);\n                req.onsuccess = () => resolve(req.result);\n                req.onerror = () => reject(req.error);\n            });\n        });\n    }\n    async dbIndexRequest(indexName, cmd, args) {\n        const readFlag = this._writeCmds.indexOf(cmd) !== -1 ? 'readwrite' : 'readonly';\n        return this.initDb().then((conn) => {\n            return new Promise((resolve, reject) => {\n                const tx = conn.transaction(['FileStorage'], readFlag);\n                const store = tx.objectStore('FileStorage');\n                const index = store.index(indexName);\n                const req = index[cmd](...args);\n                req.onsuccess = () => resolve(req.result);\n                req.onerror = () => reject(req.error);\n            });\n        });\n    }\n    getPath(directory, uriPath) {\n        const cleanedUriPath = uriPath !== undefined ? uriPath.replace(/^[/]+|[/]+$/g, '') : '';\n        let fsPath = '';\n        if (directory !== undefined)\n            fsPath += '/' + directory;\n        if (uriPath !== '')\n            fsPath += '/' + cleanedUriPath;\n        return fsPath;\n    }\n    async clear() {\n        const conn = await this.initDb();\n        const tx = conn.transaction(['FileStorage'], 'readwrite');\n        const store = tx.objectStore('FileStorage');\n        store.clear();\n    }\n    /**\n     * Read a file from disk\n     * @param options options for the file read\n     * @return a promise that resolves with the read file data result\n     */\n    async readFile(options) {\n        const path = this.getPath(options.directory, options.path);\n        // const encoding = options.encoding;\n        const entry = (await this.dbRequest('get', [path]));\n        if (entry === undefined)\n            throw Error('File does not exist.');\n        return { data: entry.content ? entry.content : '' };\n    }\n    /**\n     * Write a file to disk in the specified location on device\n     * @param options options for the file write\n     * @return a promise that resolves with the file write result\n     */\n    async writeFile(options) {\n        const path = this.getPath(options.directory, options.path);\n        let data = options.data;\n        const encoding = options.encoding;\n        const doRecursive = options.recursive;\n        const occupiedEntry = (await this.dbRequest('get', [path]));\n        if (occupiedEntry && occupiedEntry.type === 'directory')\n            throw Error('The supplied path is a directory.');\n        const parentPath = path.substr(0, path.lastIndexOf('/'));\n        const parentEntry = (await this.dbRequest('get', [parentPath]));\n        if (parentEntry === undefined) {\n            const subDirIndex = parentPath.indexOf('/', 1);\n            if (subDirIndex !== -1) {\n                const parentArgPath = parentPath.substr(subDirIndex);\n                await this.mkdir({\n                    path: parentArgPath,\n                    directory: options.directory,\n                    recursive: doRecursive,\n                });\n            }\n        }\n        if (!encoding) {\n            data = data.indexOf(',') >= 0 ? data.split(',')[1] : data;\n            if (!this.isBase64String(data))\n                throw Error('The supplied data is not valid base64 content.');\n        }\n        const now = Date.now();\n        const pathObj = {\n            path: path,\n            folder: parentPath,\n            type: 'file',\n            size: data.length,\n            ctime: now,\n            mtime: now,\n            content: data,\n        };\n        await this.dbRequest('put', [pathObj]);\n        return {\n            uri: pathObj.path,\n        };\n    }\n    /**\n     * Append to a file on disk in the specified location on device\n     * @param options options for the file append\n     * @return a promise that resolves with the file write result\n     */\n    async appendFile(options) {\n        const path = this.getPath(options.directory, options.path);\n        let data = options.data;\n        const encoding = options.encoding;\n        const parentPath = path.substr(0, path.lastIndexOf('/'));\n        const now = Date.now();\n        let ctime = now;\n        const occupiedEntry = (await this.dbRequest('get', [path]));\n        if (occupiedEntry && occupiedEntry.type === 'directory')\n            throw Error('The supplied path is a directory.');\n        const parentEntry = (await this.dbRequest('get', [parentPath]));\n        if (parentEntry === undefined) {\n            const subDirIndex = parentPath.indexOf('/', 1);\n            if (subDirIndex !== -1) {\n                const parentArgPath = parentPath.substr(subDirIndex);\n                await this.mkdir({\n                    path: parentArgPath,\n                    directory: options.directory,\n                    recursive: true,\n                });\n            }\n        }\n        if (!encoding && !this.isBase64String(data))\n            throw Error('The supplied data is not valid base64 content.');\n        if (occupiedEntry !== undefined) {\n            if (occupiedEntry.content !== undefined && !encoding) {\n                data = btoa(atob(occupiedEntry.content) + atob(data));\n            }\n            else {\n                data = occupiedEntry.content + data;\n            }\n            ctime = occupiedEntry.ctime;\n        }\n        const pathObj = {\n            path: path,\n            folder: parentPath,\n            type: 'file',\n            size: data.length,\n            ctime: ctime,\n            mtime: now,\n            content: data,\n        };\n        await this.dbRequest('put', [pathObj]);\n    }\n    /**\n     * Delete a file from disk\n     * @param options options for the file delete\n     * @return a promise that resolves with the deleted file data result\n     */\n    async deleteFile(options) {\n        const path = this.getPath(options.directory, options.path);\n        const entry = (await this.dbRequest('get', [path]));\n        if (entry === undefined)\n            throw Error('File does not exist.');\n        const entries = await this.dbIndexRequest('by_folder', 'getAllKeys', [\n            IDBKeyRange.only(path),\n        ]);\n        if (entries.length !== 0)\n            throw Error('Folder is not empty.');\n        await this.dbRequest('delete', [path]);\n    }\n    /**\n     * Create a directory.\n     * @param options options for the mkdir\n     * @return a promise that resolves with the mkdir result\n     */\n    async mkdir(options) {\n        const path = this.getPath(options.directory, options.path);\n        const doRecursive = options.recursive;\n        const parentPath = path.substr(0, path.lastIndexOf('/'));\n        const depth = (path.match(/\\//g) || []).length;\n        const parentEntry = (await this.dbRequest('get', [parentPath]));\n        const occupiedEntry = (await this.dbRequest('get', [path]));\n        if (depth === 1)\n            throw Error('Cannot create Root directory');\n        if (occupiedEntry !== undefined)\n            throw Error('Current directory does already exist.');\n        if (!doRecursive && depth !== 2 && parentEntry === undefined)\n            throw Error('Parent directory must exist');\n        if (doRecursive && depth !== 2 && parentEntry === undefined) {\n            const parentArgPath = parentPath.substr(parentPath.indexOf('/', 1));\n            await this.mkdir({\n                path: parentArgPath,\n                directory: options.directory,\n                recursive: doRecursive,\n            });\n        }\n        const now = Date.now();\n        const pathObj = {\n            path: path,\n            folder: parentPath,\n            type: 'directory',\n            size: 0,\n            ctime: now,\n            mtime: now,\n        };\n        await this.dbRequest('put', [pathObj]);\n    }\n    /**\n     * Remove a directory\n     * @param options the options for the directory remove\n     */\n    async rmdir(options) {\n        const { path, directory, recursive } = options;\n        const fullPath = this.getPath(directory, path);\n        const entry = (await this.dbRequest('get', [fullPath]));\n        if (entry === undefined)\n            throw Error('Folder does not exist.');\n        if (entry.type !== 'directory')\n            throw Error('Requested path is not a directory');\n        const readDirResult = await this.readdir({ path, directory });\n        if (readDirResult.files.length !== 0 && !recursive)\n            throw Error('Folder is not empty');\n        for (const entry of readDirResult.files) {\n            const entryPath = `${path}/${entry.name}`;\n            const entryObj = await this.stat({ path: entryPath, directory });\n            if (entryObj.type === 'file') {\n                await this.deleteFile({ path: entryPath, directory });\n            }\n            else {\n                await this.rmdir({ path: entryPath, directory, recursive });\n            }\n        }\n        await this.dbRequest('delete', [fullPath]);\n    }\n    /**\n     * Return a list of files from the directory (not recursive)\n     * @param options the options for the readdir operation\n     * @return a promise that resolves with the readdir directory listing result\n     */\n    async readdir(options) {\n        const path = this.getPath(options.directory, options.path);\n        const entry = (await this.dbRequest('get', [path]));\n        if (options.path !== '' && entry === undefined)\n            throw Error('Folder does not exist.');\n        const entries = await this.dbIndexRequest('by_folder', 'getAllKeys', [IDBKeyRange.only(path)]);\n        const files = await Promise.all(entries.map(async (e) => {\n            let subEntry = (await this.dbRequest('get', [e]));\n            if (subEntry === undefined) {\n                subEntry = (await this.dbRequest('get', [e + '/']));\n            }\n            return {\n                name: e.substring(path.length + 1),\n                type: subEntry.type,\n                size: subEntry.size,\n                ctime: subEntry.ctime,\n                mtime: subEntry.mtime,\n                uri: subEntry.path,\n            };\n        }));\n        return { files: files };\n    }\n    /**\n     * Return full File URI for a path and directory\n     * @param options the options for the stat operation\n     * @return a promise that resolves with the file stat result\n     */\n    async getUri(options) {\n        const path = this.getPath(options.directory, options.path);\n        let entry = (await this.dbRequest('get', [path]));\n        if (entry === undefined) {\n            entry = (await this.dbRequest('get', [path + '/']));\n        }\n        return {\n            uri: (entry === null || entry === void 0 ? void 0 : entry.path) || path,\n        };\n    }\n    /**\n     * Return data about a file\n     * @param options the options for the stat operation\n     * @return a promise that resolves with the file stat result\n     */\n    async stat(options) {\n        const path = this.getPath(options.directory, options.path);\n        let entry = (await this.dbRequest('get', [path]));\n        if (entry === undefined) {\n            entry = (await this.dbRequest('get', [path + '/']));\n        }\n        if (entry === undefined)\n            throw Error('Entry does not exist.');\n        return {\n            type: entry.type,\n            size: entry.size,\n            ctime: entry.ctime,\n            mtime: entry.mtime,\n            uri: entry.path,\n        };\n    }\n    /**\n     * Rename a file or directory\n     * @param options the options for the rename operation\n     * @return a promise that resolves with the rename result\n     */\n    async rename(options) {\n        await this._copy(options, true);\n        return;\n    }\n    /**\n     * Copy a file or directory\n     * @param options the options for the copy operation\n     * @return a promise that resolves with the copy result\n     */\n    async copy(options) {\n        return this._copy(options, false);\n    }\n    async requestPermissions() {\n        return { publicStorage: 'granted' };\n    }\n    async checkPermissions() {\n        return { publicStorage: 'granted' };\n    }\n    /**\n     * Function that can perform a copy or a rename\n     * @param options the options for the rename operation\n     * @param doRename whether to perform a rename or copy operation\n     * @return a promise that resolves with the result\n     */\n    async _copy(options, doRename = false) {\n        let { toDirectory } = options;\n        const { to, from, directory: fromDirectory } = options;\n        if (!to || !from) {\n            throw Error('Both to and from must be provided');\n        }\n        // If no \"to\" directory is provided, use the \"from\" directory\n        if (!toDirectory) {\n            toDirectory = fromDirectory;\n        }\n        const fromPath = this.getPath(fromDirectory, from);\n        const toPath = this.getPath(toDirectory, to);\n        // Test that the \"to\" and \"from\" locations are different\n        if (fromPath === toPath) {\n            return {\n                uri: toPath,\n            };\n        }\n        if (isPathParent(fromPath, toPath)) {\n            throw Error('To path cannot contain the from path');\n        }\n        // Check the state of the \"to\" location\n        let toObj;\n        try {\n            toObj = await this.stat({\n                path: to,\n                directory: toDirectory,\n            });\n        }\n        catch (e) {\n            // To location does not exist, ensure the directory containing \"to\" location exists and is a directory\n            const toPathComponents = to.split('/');\n            toPathComponents.pop();\n            const toPath = toPathComponents.join('/');\n            // Check the containing directory of the \"to\" location exists\n            if (toPathComponents.length > 0) {\n                const toParentDirectory = await this.stat({\n                    path: toPath,\n                    directory: toDirectory,\n                });\n                if (toParentDirectory.type !== 'directory') {\n                    throw new Error('Parent directory of the to path is a file');\n                }\n            }\n        }\n        // Cannot overwrite a directory\n        if (toObj && toObj.type === 'directory') {\n            throw new Error('Cannot overwrite a directory with a file');\n        }\n        // Ensure the \"from\" object exists\n        const fromObj = await this.stat({\n            path: from,\n            directory: fromDirectory,\n        });\n        // Set the mtime/ctime of the supplied path\n        const updateTime = async (path, ctime, mtime) => {\n            const fullPath = this.getPath(toDirectory, path);\n            const entry = (await this.dbRequest('get', [fullPath]));\n            entry.ctime = ctime;\n            entry.mtime = mtime;\n            await this.dbRequest('put', [entry]);\n        };\n        const ctime = fromObj.ctime ? fromObj.ctime : Date.now();\n        switch (fromObj.type) {\n            // The \"from\" object is a file\n            case 'file': {\n                // Read the file\n                const file = await this.readFile({\n                    path: from,\n                    directory: fromDirectory,\n                });\n                // Optionally remove the file\n                if (doRename) {\n                    await this.deleteFile({\n                        path: from,\n                        directory: fromDirectory,\n                    });\n                }\n                // Write the file to the new location\n                const writeResult = await this.writeFile({\n                    path: to,\n                    directory: toDirectory,\n                    data: file.data,\n                });\n                // Copy the mtime/ctime of a renamed file\n                if (doRename) {\n                    await updateTime(to, ctime, fromObj.mtime);\n                }\n                // Resolve promise\n                return writeResult;\n            }\n            case 'directory': {\n                if (toObj) {\n                    throw Error('Cannot move a directory over an existing object');\n                }\n                try {\n                    // Create the to directory\n                    await this.mkdir({\n                        path: to,\n                        directory: toDirectory,\n                        recursive: false,\n                    });\n                    // Copy the mtime/ctime of a renamed directory\n                    if (doRename) {\n                        await updateTime(to, ctime, fromObj.mtime);\n                    }\n                }\n                catch (e) {\n                    // ignore\n                }\n                // Iterate over the contents of the from location\n                const contents = (await this.readdir({\n                    path: from,\n                    directory: fromDirectory,\n                })).files;\n                for (const filename of contents) {\n                    // Move item from the from directory to the to directory\n                    await this._copy({\n                        from: `${from}/${filename}`,\n                        to: `${to}/${filename}`,\n                        directory: fromDirectory,\n                        toDirectory,\n                    }, doRename);\n                }\n                // Optionally remove the original from directory\n                if (doRename) {\n                    await this.rmdir({\n                        path: from,\n                        directory: fromDirectory,\n                    });\n                }\n            }\n        }\n        return {\n            uri: toPath,\n        };\n    }\n    isBase64String(str) {\n        const base64regex = /^([0-9a-zA-Z+/]{4})*(([0-9a-zA-Z+/]{2}==)|([0-9a-zA-Z+/]{3}=))?$/;\n        return base64regex.test(str);\n    }\n}\nFilesystemWeb._debug = true;\n"],"names":["WebPlugin","resolve","path","posix","split","filter","item","newPosix","forEach","length","pop","push","join","isPathParent","parent","children","pathsA","pathsB","every","value","index","FilesystemWeb","constructor","arguments","DB_VERSION","DB_NAME","_writeCmds","initDb","_db","undefined","window","unavailable","Promise","reject","request","indexedDB","open","onupgradeneeded","doUpgrade","onsuccess","result","onerror","error","onblocked","console","warn","event","eventTarget","target","db","oldVersion","objectStoreNames","contains","deleteObjectStore","store","createObjectStore","keyPath","createIndex","dbRequest","cmd","args","readFlag","indexOf","then","conn","tx","transaction","objectStore","req","dbIndexRequest","indexName","getPath","directory","uriPath","cleanedUriPath","replace","fsPath","clear","readFile","options","entry","Error","data","content","writeFile","encoding","doRecursive","recursive","occupiedEntry","type","parentPath","substr","lastIndexOf","parentEntry","subDirIndex","parentArgPath","mkdir","isBase64String","now","Date","pathObj","folder","size","ctime","mtime","uri","appendFile","btoa","atob","deleteFile","entries","IDBKeyRange","only","depth","match","rmdir","fullPath","readDirResult","readdir","files","entryPath","name","entryObj","stat","all","map","e","subEntry","substring","getUri","rename","_copy","copy","requestPermissions","publicStorage","checkPermissions","doRename","toDirectory","to","from","fromDirectory","fromPath","toPath","toObj","toPathComponents","toParentDirectory","fromObj","updateTime","file","writeResult","contents","filename","str","base64regex","test","_debug"],"sourceRoot":"webpack:///","x_google_ignoreList":[0]}